#!/usr/bin/python
#team dan_and_will

import getopt
import re
import socket
import ssl
import sys

STATUS_REGEX = r'^cs3700spring2016 STATUS \d{1,4} (\/|\*|\-|\+) \d{1,4}$'
BYE_REGEX = r'^cs3700spring2016 BYE [0-9a-f]{64}$'
MESSAGE_FORMAT = "cs3700spring2016 {msg}\n"

def get_socket(use_ssl):
    """
    create and return socket
    """
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    if use_ssl:
        sock = ssl.wrap_socket(sock) #make the socket an SSL socket
    return sock

def validate_response(response):
    """
    check if server response is validate_response
    """
    if response == '':
        raise RuntimeError('Socket connection broken')
    status_match = re.match(STATUS_REGEX, response)
    bye_match = re.match(BYE_REGEX, response)
    if not (bool(status_match) or bool(bye_match)):
        raise RuntimeError("Invalid response")

def parse_response(response):
    """
    parse response from server and return useful variables
    """
    validate_response(response)
    _, status, msg = response.split(' ', 2)
    return status, msg.strip()

def parse_cmd_line():
    """
    parse command line arguments and return useful variables
    """
    port = 27993  #default port
    use_ssl = False #don't use SSL by default
    opts, args = getopt.getopt(sys.argv[1:], "sp:")
    if len(args) != 2:
        raise RuntimeError('User must supply a hostname and NEU id as arguments in that order')
    hostname, nu_id = args
    #make sure the SSL arg is parsed first so it doesn't overwrite port in -p
    opts = sorted(opts, reverse=True)
    # parse commandline flags
    for opt, arg in opts:
        if opt == "-p":
            port = int(arg)
        if opt  == "-s":
            use_ssl = True
            port = 27994 #default port for SSL - can be overridden later
    return use_ssl, port, hostname, nu_id

def create_message(msg):
    """
    simplify creation of encoded message to send to server
    """
    return MESSAGE_FORMAT.format(msg=msg).encode() #remove null characters

def main():
    """
    main method
    runs code necessary to complete project
    """
    secret_key = None
    use_ssl, port, hostname, nu_id = parse_cmd_line()
    hello_msg = create_message("HELLO {nu_id}".format(nu_id=nu_id))
    client_socket = get_socket(use_ssl)
    client_socket.connect((hostname, port)) #connect to the server
    client_socket.send(hello_msg)
    while True: #loop until the bye message
        response = client_socket.recv(256) # max response length
        response_status , msg = parse_response(response)
        if response_status == 'BYE':
            secret_key = msg
            break
        # solve math problem and round down
        solution = int(eval(msg))
        solution_message = create_message(solution)
        client_socket.send(solution_message) #send the solution

    client_socket.shutdown(socket.SHUT_RDWR) # shutdown socket
    client_socket.close() # close the connection
    print('secret key for {nu_id} is {secret_key}'.format(nu_id=nu_id, secret_key=secret_key)) # We made it!

if __name__ == '__main__':
    main()
